@page "/projectedit"
@page "/projectedit/{id}"
@inject Csla.Blazor.ViewModel<ProjectTracker.Library.ProjectEdit> vm
@inject NavigationManager NavigationManager

<h1>Edit Project</h1>

<p class="text-danger">@vm.ViewModelErrorText</p>

<p>
  <a href="projects">Project list</a>
</p>

@if (vm.Model != null)
{
  <table class="table">
    <thead>
      <tr>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      @if (vm.Model.CanReadProperty(nameof(vm.Model.Id)))
      {
        <tr>
          <td>Id</td>
          <td>@vm.Model.Id</td>
        </tr>
      }
      @if (vm.GetPropertyInfo<string>(nameof(vm.Model.Name)).CanRead)
      {
        <tr>
          <td>@(vm.GetPropertyInfo<string>(nameof(vm.Model.Name)).FriendlyName)</td>
          <td>
            <TextInput Property="@(vm.GetPropertyInfo<string>(nameof(vm.Model.Name)))" />
          </td>
        </tr>
      }
      @if (vm.GetPropertyInfo<string>(nameof(vm.Model.Description)).CanRead)
      {
        <tr>
          <td>@(vm.GetPropertyInfo<string>(nameof(vm.Model.Description)).FriendlyName)</td>
          <td>
            <TextArea rows="5" Property="@(vm.GetPropertyInfo<string>(nameof(vm.Model.Description)))" />
          </td>
        </tr>
      }
      @if (vm.GetPropertyInfo<DateTime?>(nameof(vm.Model.Started)).CanRead)
      {
        <tr>
          <td>@(vm.GetPropertyInfo<DateTime?>(nameof(vm.Model.Started)).FriendlyName)</td>
          <td>
            <DateInput Property="@(vm.GetPropertyInfo<DateTime?>(nameof(vm.Model.Started)))" />
          </td>
        </tr>
      }
      @if (vm.GetPropertyInfo<DateTime?>(nameof(vm.Model.Ended)).CanRead)
      {
        <tr>
          <td>@(vm.GetPropertyInfo<DateTime?>(nameof(vm.Model.Ended)).FriendlyName)</td>
          <td>
            <DateInput Property="@(vm.GetPropertyInfo<DateTime?>(nameof(vm.Model.Ended)))" EmptyIsMin="false" />
          </td>
        </tr>
      }
    </tbody>
  </table>
  <a href="javascript: void(0);" @onclick="AddResource">Add resource</a>
  <table class="table">
    <thead>
      <tr>
        <th></th>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      @foreach (var item in vm.Model.Resources)
      {
        <tr>
          <td>@item.FirstName</td>
          <td>@item.LastName</td>
          <td><a href="javascript: void(0);" @onclick="() => RemoveResource(item.ResourceId)">Remove</a></td>
        </tr>
      }
    </tbody>
  </table>
  <button @onclick="vm.SaveAsync" disabled="@(!vm.Model.IsSavable)">Save</button>
}

@code {
  [Parameter]
  public string id { get; set; }

  protected override void OnInitialized()
  {
    vm.Saved += () => NavigationManager.NavigateTo("projects");
    vm.ModelChanging += (o, n) =>
    {
      if (o != null)
        o.PropertyChanged -= async (s, e) => await InvokeAsync(() => StateHasChanged());
      if (n != null)
        n.PropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
    };
  }

  protected override async Task OnParametersSetAsync()
  {
    if (string.IsNullOrWhiteSpace(id))
      await vm.RefreshAsync();
    else
      await vm.RefreshAsync(int.Parse(id));
  }

  private void AddResource()
  { }

  private void RemoveResource(int resourceId)
  {
    vm.Model.Resources.Remove(resourceId);
  }
}
