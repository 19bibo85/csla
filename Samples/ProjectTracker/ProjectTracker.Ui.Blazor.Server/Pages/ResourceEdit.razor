@page "/resourceedit"
@page "/resourceedit/{id}"
@inject Csla.Blazor.ViewModel<ProjectTracker.Library.ResourceEdit> vm
@inject NavigationManager NavigationManager

<h1>Edit Resource</h1>

<p class="text-danger">@vm.ViewModelErrorText</p>

<p>
  <a href="resources">Resource list</a>
</p>

@if (vm.Model != null)
{
  <table class="table">
    <thead>
      <tr>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      @if (vm.Model.CanReadProperty(nameof(vm.Model.Id)))
      {
        <tr>
          <td>Id</td>
          <td>@vm.Model.Id</td>
        </tr>
      }
      @if (vm.GetPropertyInfo<string>(nameof(vm.Model.FirstName)).CanRead)
      {
        <tr>
          <td>@(vm.GetPropertyInfo<string>(nameof(vm.Model.FirstName)).FriendlyName)</td>
          <td>
            <TextInput Property="@(vm.GetPropertyInfo<string>(nameof(vm.Model.FirstName)))" />
          </td>
        </tr>
      }
      @if (vm.GetPropertyInfo<string>(nameof(vm.Model.LastName)).CanRead)
      {
        <tr>
          <td>@(vm.GetPropertyInfo<string>(nameof(vm.Model.LastName)).FriendlyName)</td>
          <td>
            <TextInput Property="@(vm.GetPropertyInfo<string>(nameof(vm.Model.LastName)))" />
          </td>
        </tr>
      }
    </tbody>
  </table>
  @if (!IsSelectingProject)
  {
    <a href="javascript: void(0);" @onclick="SelectProject">Assign to project</a>
    <table class="table">
      <thead>
        <tr>
          <th>Project</th>
          <th>Role</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        @foreach (var item in vm.Model.Assignments)
        {
          <tr>
            <td>@item.ProjectName</td>
            <td>@item.RoleName</td>
            <td><a href="javascript: void(0);" @onclick="() => RemoveAssignment(item.ProjectId)">Remove</a></td>
          </tr>
        }
      </tbody>
    </table>
  }
  else
  {
    <div style="background-color:lightgray">
      @if (_projectList == null)
      {
        <p>Loading project list...</p>
      }
      else
      {
        <a href="javascript: void(0);" @onclick="() => IsSelectingProject = false">Cancel assignment</a>
        <table class="table">
          <thead>
            <tr>
              <th>Project</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            @foreach (var item in _projectList)
            {
              <tr>
                <td>@item.Name</td>
                <td><a href="javascript: void(0);" @onclick="() => Assign(item.Id)">Assign</a></td>
              </tr>
            }
          </tbody>
        </table>
      }
    </div>
  }
  <button @onclick="vm.SaveAsync" disabled="@(!vm.Model.IsSavable)">Save</button>
}

@code {
  [Parameter]
  public string id { get; set; }

  private bool IsSelectingProject = false;
  private List<ProjectTracker.Library.ProjectInfo> _projectList;

  protected override void OnInitialized()
  {
    vm.Saved += () => NavigationManager.NavigateTo("resources");
    vm.ModelChanging += (o, n) =>
    {
      if (o != null)
        o.PropertyChanged -= async (s, e) => await InvokeAsync(() => StateHasChanged());
      if (n != null)
        n.PropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
    };
  }

  protected override async Task OnParametersSetAsync()
  {
    if (string.IsNullOrWhiteSpace(id))
      await vm.RefreshAsync();
    else
      await vm.RefreshAsync(int.Parse(id));
  }

  private async void SelectProject()
  {
    IsSelectingProject = true;
    _projectList = (await ProjectTracker.Library.ProjectList.GetProjectListAsync())
                      .Where(r => !vm.Model.Assignments.Contains(r.Id)).ToList();
    StateHasChanged();
  }

  private async void Assign(int projectId)
  {
    await vm.Model.Assignments.AssignToAsync(projectId);
    IsSelectingProject = false;
    StateHasChanged();
  }

  private void RemoveAssignment(int projectId)
  {
    vm.Model.Assignments.Remove(projectId);
  }
}
