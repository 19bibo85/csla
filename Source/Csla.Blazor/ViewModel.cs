//-----------------------------------------------------------------------
// <copyright file="ViewModel.cs" company="Marimer LLC">
//     Copyright (c) Marimer LLC. All rights reserved.
//     Website: https://cslanet.com
// </copyright>
// <summary>Base type for creating your own viewmodel</summary>
//-----------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Linq;
using System.Threading.Tasks;
using Csla.Rules;

namespace Csla.Blazor
{
  /// <summary>
  /// Base type for creating your own viewmodel.
  /// </summary>
  public class ViewModel<T>
  {
    private IDataPortal<T> DataPortal { get; set; }

    /// <summary>
    /// Event raised after Model has been saved
    /// </summary>
    public event Action Saved;

    /// <summary>
    /// Creates an instance of the type
    /// </summary>
    public ViewModel(IDataPortal<T> dataPortal)
    {
      DataPortal = dataPortal;
    }

    /// <summary>
    /// Refresh the Model
    /// </summary>
    /// <param name="parameters">Parameters passed to data portal</param>
    /// <returns></returns>
    public async Task<T> RefreshAsync(params object[] parameters)
    {
      try
      {
        Model = await DoRefreshAsync(parameters);
      }
      catch (DataPortalException ex)
      {
        Model = default;
        ViewModelErrorText = ex.BusinessException.Message;
        Console.WriteLine(ex.ToString());
      }
      catch (Exception ex)
      {
        Model = default;
        ViewModelErrorText = ex.Message;
        Console.WriteLine(ex.ToString());
      }
      return Model;
    }

    /// <summary>
    /// Override to provide custom Model refresh behavior
    /// </summary>
    /// <param name="parameters">Parameters passed to data portal</param>
    /// <returns></returns>
    protected virtual async Task<T> DoRefreshAsync(params object[] parameters)
    {
      if (typeof(Core.IReadOnlyObject).IsAssignableFrom(typeof(T)) ||
          typeof(Core.IReadOnlyCollection).IsAssignableFrom(typeof(T)))
      {
        if (Server.DataPortal.GetCriteriaFromArray(parameters) is Server.EmptyCriteria)
          return await DataPortal.FetchAsync();
        else
          return await DataPortal.FetchAsync(parameters);
      }
      else
      {
        if (Server.DataPortal.GetCriteriaFromArray(parameters) is Server.EmptyCriteria)
          return await DataPortal.CreateAsync();
        else
          return await DataPortal.FetchAsync(parameters);
      }
    }

    /// <summary>
    /// Saves the Model
    /// </summary>
    /// <returns></returns>
    public async Task SaveAsync()
    {
      if (Model is Core.ITrackStatus obj && !obj.IsSavable)
      {
        ViewModelErrorText = ModelErrorText;
        return;
      }
      try
      {
        Model = await DoSaveAsync();
        Saved?.Invoke();
      }
      catch (Exception ex)
      {
        ViewModelErrorText = ex.Message;
        Console.WriteLine(ex.ToString());
      }
    }

    /// <summary>
    /// Override to provide custom Model save behavior
    /// </summary>
    /// <returns></returns>
    protected virtual async Task<T> DoSaveAsync()
    {
      if (Model is Core.ISavable savable)
      {
        var result = (T)await savable.SaveAsync();
        if (Model is Core.IEditableBusinessObject editable)
          new Core.GraphMerger().MergeGraph(editable, (Core.IEditableBusinessObject)result);
        else
          Model = result;
      }
      return Model;
    }

    /// <summary>
    /// Gets or sets the Model object.
    /// </summary>
    public T Model { get; set; }

    /// <summary>
    /// Gets any error text generated by refresh or save operations
    /// </summary>
    public string ViewModelErrorText { get; protected set; }

    /// <summary>
    /// Gets the first validation error 
    /// message from the Model
    /// </summary>
    protected virtual string ModelErrorText
    {
      get
      {
        if (Model is IDataErrorInfo obj)
        {
          return obj.Error;
        }
        return string.Empty;
      }
    }

    /// <summary>
    /// Gets the first validation error message for a
    /// property on the Model
    /// </summary>
    /// <param name="propertyName">Property name</param>
    /// <returns></returns>
    public string GetErrorText(string propertyName)
    {
      var result = string.Empty;
      if (Model is Core.BusinessBase obj)
      {
        BrokenRule worst = (from r in obj.BrokenRulesCollection
                            where r.Property == propertyName &&
                                  r.Severity == RuleSeverity.Error
                            select r).FirstOrDefault();
        if (worst != null)
        {
          result = worst.Description;
        }
      }
      return result;
    }

    /// <summary>
    /// Gets the first validation warning message for a
    /// property on the Model
    /// </summary>
    /// <param name="propertyName">Property name</param>
    /// <returns></returns>
    public string GetWarningText(string propertyName)
    {
      var result = string.Empty;
      if (Model is Core.BusinessBase obj)
      {
        BrokenRule worst = (from r in obj.BrokenRulesCollection
                            where r.Property == propertyName && 
                                  r.Severity == RuleSeverity.Warning
                            select r).FirstOrDefault();
        if (worst != null)
        {
          result = worst.Description;
        }
      }
      return result;
    }

    /// <summary>
    /// Gets the first validation information message for a
    /// property on the Model
    /// </summary>
    /// <param name="propertyName">Property name</param>
    /// <returns></returns>
    public string GetInformationText(string propertyName)
    {
      var result = string.Empty;
      if (Model is Core.BusinessBase obj)
      {
        BrokenRule worst = (from r in obj.BrokenRulesCollection
                            where r.Property == propertyName &&
                                  r.Severity == RuleSeverity.Information
                            select r).FirstOrDefault();
        if (worst != null)
        {
          result = worst.Description;
        }
      }
      return result;
    }

    /// <summary>
    /// Gets a value indicating whether the current user
    /// is authorized to read the property on the Model
    /// </summary>
    /// <param name="propertyName">Property name</param>
    /// <returns></returns>
    public bool CanRead(string propertyName)
    {
      if (Model is Security.IAuthorizeReadWrite obj)
        return obj.CanReadProperty(propertyName);
      else
        return true;
    }

    /// <summary>
    /// Gets a value indicating whether the current user
    /// is authorized to change the property on the Model
    /// </summary>
    /// <param name="propertyName">Property name</param>
    /// <returns></returns>
    public bool CanWrite(string propertyName)
    {
      if (Model is Security.IAuthorizeReadWrite obj)
        return obj.CanWriteProperty(propertyName);
      else
        return true;
    }

    /// <summary>
    /// Gets a value indicating whether the property 
    /// on the Model is busy
    /// </summary>
    /// <param name="propertyName">Property name</param>
    /// <returns></returns>
    public bool IsBusy(string propertyName)
    {
      if (Model is Core.BusinessBase obj)
        return obj.IsPropertyBusy(propertyName);
      else
        return false;
    }

    /// <summary>
    /// Gets a value indicating whether the current user
    /// is authorized to create an instance of the
    /// business domain type
    /// </summary>
    /// <returns></returns>
    public static bool CanCreateObject()
    {
      return BusinessRules.HasPermission(AuthorizationActions.CreateObject, typeof(T));
    }

    /// <summary>
    /// Gets a value indicating whether the current user
    /// is authorized to retrieve an instance of the
    /// business domain type
    /// </summary>
    /// <returns></returns>
    public static bool CanGetObject()
    {
      return BusinessRules.HasPermission(AuthorizationActions.GetObject, typeof(T));
    }

    /// <summary>
    /// Gets a value indicating whether the current user
    /// is authorized to edit/save an instance of the
    /// business domain type
    /// </summary>
    /// <returns></returns>
    public static bool CanEditObject()
    {
      return BusinessRules.HasPermission(AuthorizationActions.EditObject, typeof(T));
    }

    /// <summary>
    /// Gets a value indicating whether the current user
    /// is authorized to delete an instance of the
    /// business domain type
    /// </summary>
    /// <returns></returns>
    public static bool CanDeleteObject()
    {
      return BusinessRules.HasPermission(AuthorizationActions.DeleteObject, typeof(T));
    }
  }
}
